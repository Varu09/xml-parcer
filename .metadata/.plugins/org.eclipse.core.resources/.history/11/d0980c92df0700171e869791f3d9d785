package myPackage;

import java.io.File;
import java.util.*;

import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;


import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


/**
 * MyDOMParcer
 * @author Grajdan Ioan Alexandru 
 *
 */
public class MyDOMParser {
	public static void main(String[] args) {

		for (File file : new File("inputs/").listFiles()) {
			try {
			
				String fileName = file.getName();
				String digits = fileName.substring(fileName.length() - 6, fileName.length() - 4);

				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.parse(file.getAbsolutePath());

				HashMap<String, List<Product>> productMap = new HashMap<>();
				NodeList orders = doc.getElementsByTagName("order");

				for (int i = 0; i < orders.getLength(); i++) {
					Node order = orders.item(i);
					NodeList productsElem = order.getChildNodes();

					for (int j = 0; j < productsElem.getLength(); j++) {
						Node productElement = productsElem.item(j);

						if (productElement.getNodeType() == Node.ELEMENT_NODE) {
							Product product = new Product(productElement, order);
							if (productMap.containsKey(product.getSupplier())) {
								productMap.get(product.getSupplier()).add(product);
							} else {
								productMap.put(product.getSupplier(), new ArrayList<>());
								productMap.get(product.getSupplier()).add(product);
							}

						}
					}

				}

				productMap.entrySet().forEach(productList -> {
					sortProducts(productList.getValue());
					WriteXmlFile writeXmlFile = new WriteXmlFile(productList.getKey() + digits + ".xml");
					writeXmlFile.createFile(productList.getValue());
				});

			} catch (Exception e) {
				e.printStackTrace();
			} 
		}
	}


	public static void sortProducts(List<Product> products) {
		Collections.sort(products, new Comparator<Product>(){
			
			public int compare(Product p1, Product p2){
				int comparator = p2.getCreatedDate().compareTo(p1.getCreatedDate());
				return comparator != 0 ? comparator : p1.getPrice().compareTo(p1.getPrice());
			}
		});
	}
}